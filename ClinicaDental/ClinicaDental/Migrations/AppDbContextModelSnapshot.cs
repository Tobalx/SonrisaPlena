// <auto-generated />
using System;
using ClinicaDental.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClinicaDental.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ClinicaDental.Models.Entities.Administrador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.EjecucionTratamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("FechaEstimada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaRealizacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ObservacionesGenerales")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("OdontologoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OdontologoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("EjecucionesTratamiento");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.EjecucionTratamientoDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EjecucionTratamientoId")
                        .HasColumnType("int");

                    b.Property<int>("TratamientoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EjecucionTratamientoId");

                    b.HasIndex("TratamientoId");

                    b.ToTable("EjecucionTratamientoDetalle");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Odontologo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreadoPorAdministradorId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPorAdministradorId");

                    b.ToTable("Odontologos");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RUT")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Recepcionista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Recepcionistas");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Tratamiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreadoPorAdministradorId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreadoPorAdministradorId");

                    b.ToTable("Tratamientos");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.TratamientoPorTurno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EjecucionTratamientoId")
                        .HasColumnType("int");

                    b.Property<string>("EstadoPaso")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ObservacionesTurno")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("TurnoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EjecucionTratamientoId");

                    b.HasIndex("TurnoId");

                    b.ToTable("TratamientosPorTurno");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Turno", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DuracionMinutos")
                        .HasColumnType("int");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("Hora")
                        .HasColumnType("time");

                    b.Property<int>("OdontologoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("RecepcionistaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OdontologoId");

                    b.HasIndex("PacienteId");

                    b.HasIndex("RecepcionistaId");

                    b.ToTable("Turnos");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdministradorId")
                        .HasColumnType("int");

                    b.Property<string>("Contrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("OdontologoId")
                        .HasColumnType("int");

                    b.Property<int?>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int?>("RecepcionistaId")
                        .HasColumnType("int");

                    b.Property<int>("RolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministradorId")
                        .IsUnique()
                        .HasFilter("[AdministradorId] IS NOT NULL");

                    b.HasIndex("OdontologoId")
                        .IsUnique()
                        .HasFilter("[OdontologoId] IS NOT NULL");

                    b.HasIndex("PacienteId")
                        .IsUnique()
                        .HasFilter("[PacienteId] IS NOT NULL");

                    b.HasIndex("RecepcionistaId")
                        .IsUnique()
                        .HasFilter("[RecepcionistaId] IS NOT NULL");

                    b.HasIndex("RolId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.EjecucionTratamiento", b =>
                {
                    b.HasOne("ClinicaDental.Models.Entities.Odontologo", "Odontologo")
                        .WithMany("EjecucionesTratamiento")
                        .HasForeignKey("OdontologoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicaDental.Models.Entities.Paciente", "Paciente")
                        .WithMany("EjecucionesTratamiento")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Odontologo");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.EjecucionTratamientoDetalle", b =>
                {
                    b.HasOne("ClinicaDental.Models.Entities.EjecucionTratamiento", "EjecucionTratamiento")
                        .WithMany("EjecucionTratamientoDetalles")
                        .HasForeignKey("EjecucionTratamientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicaDental.Models.Entities.Tratamiento", "Tratamiento")
                        .WithMany()
                        .HasForeignKey("TratamientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EjecucionTratamiento");

                    b.Navigation("Tratamiento");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Odontologo", b =>
                {
                    b.HasOne("ClinicaDental.Models.Entities.Administrador", "CreadoPorAdministrador")
                        .WithMany("Odontologos")
                        .HasForeignKey("CreadoPorAdministradorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreadoPorAdministrador");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Tratamiento", b =>
                {
                    b.HasOne("ClinicaDental.Models.Entities.Administrador", "CreadoPorAdministrador")
                        .WithMany("Tratamientos")
                        .HasForeignKey("CreadoPorAdministradorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreadoPorAdministrador");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.TratamientoPorTurno", b =>
                {
                    b.HasOne("ClinicaDental.Models.Entities.EjecucionTratamiento", "EjecucionTratamiento")
                        .WithMany("TratamientosPorTurno")
                        .HasForeignKey("EjecucionTratamientoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicaDental.Models.Entities.Turno", "Turno")
                        .WithMany("TratamientosPorTurno")
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EjecucionTratamiento");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Turno", b =>
                {
                    b.HasOne("ClinicaDental.Models.Entities.Odontologo", "Odontologo")
                        .WithMany("Turnos")
                        .HasForeignKey("OdontologoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicaDental.Models.Entities.Paciente", "Paciente")
                        .WithMany("Turnos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ClinicaDental.Models.Entities.Recepcionista", "Recepcionista")
                        .WithMany("Turnos")
                        .HasForeignKey("RecepcionistaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Odontologo");

                    b.Navigation("Paciente");

                    b.Navigation("Recepcionista");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Usuario", b =>
                {
                    b.HasOne("ClinicaDental.Models.Entities.Administrador", "Administrador")
                        .WithOne("Usuario")
                        .HasForeignKey("ClinicaDental.Models.Entities.Usuario", "AdministradorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ClinicaDental.Models.Entities.Odontologo", "Odontologo")
                        .WithOne("Usuario")
                        .HasForeignKey("ClinicaDental.Models.Entities.Usuario", "OdontologoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ClinicaDental.Models.Entities.Paciente", "Paciente")
                        .WithOne("Usuario")
                        .HasForeignKey("ClinicaDental.Models.Entities.Usuario", "PacienteId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ClinicaDental.Models.Entities.Recepcionista", "Recepcionista")
                        .WithOne("Usuario")
                        .HasForeignKey("ClinicaDental.Models.Entities.Usuario", "RecepcionistaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("ClinicaDental.Models.Entities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Administrador");

                    b.Navigation("Odontologo");

                    b.Navigation("Paciente");

                    b.Navigation("Recepcionista");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Administrador", b =>
                {
                    b.Navigation("Odontologos");

                    b.Navigation("Tratamientos");

                    b.Navigation("Usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.EjecucionTratamiento", b =>
                {
                    b.Navigation("EjecucionTratamientoDetalles");

                    b.Navigation("TratamientosPorTurno");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Odontologo", b =>
                {
                    b.Navigation("EjecucionesTratamiento");

                    b.Navigation("Turnos");

                    b.Navigation("Usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Paciente", b =>
                {
                    b.Navigation("EjecucionesTratamiento");

                    b.Navigation("Turnos");

                    b.Navigation("Usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Recepcionista", b =>
                {
                    b.Navigation("Turnos");

                    b.Navigation("Usuario")
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ClinicaDental.Models.Entities.Turno", b =>
                {
                    b.Navigation("TratamientosPorTurno");
                });
#pragma warning restore 612, 618
        }
    }
}
